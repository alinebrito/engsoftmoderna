Engenharia de Software Moderna - BACKUP

Neste capítulo, vamos estudar alguns dos principais refactorings definidos por Fowler (Seção 9.2). Em seguida, vamos estudar, na Seção 9.3 alguns code smells, que é um termo usado para indicar código que não está "cheirando bem" e que talvez possa ser refatorado. Como exemplo, podemos citar métodos muito grandes ou código duplicado em várias partes de um sistema. 

=====

1. Responda V ou F.

(   ) Testes podem mostrar a presença de bugs em um sistema, mas não a ausência completa de bugs. 
(   ) Testes podem provar que um programa está incorreto, mas eles não provam que ele está correto.
(   ) Toda falha é causada por um bug (ou defeito); mas nem todo bug causa falhas.
(   ) Concorrência é um das principais causas de testes com comportamento flaky.
(   ) O contexto de um teste (ex.: objetos que são necessários para o teste) é chamado de fixture.
(   ) Todo teste deve ter sempre um único comando assert.
(   ) Uma regressão (em testes) ocorre apenas quando uma nova feature introduz bugs em código antigo.
(   ) Um ciclo TDD tem dois passos: escrever um teste que falha e fazer o teste passar.
(   ) Sempre que se usa TDD a cobertura de testes alcança 100%.
(   ) A pirâmide de testes tem 3 níveis: integração fica no topo e teste de unidades fica na base.
(   ) Testes de aceitação são uma atividade de validação; testes de unidade são atividades de verificação.
(   ) O framework JUnit -- ou similar --- também pode ser usado para testes de integração.
(   ) Se a cobertura de branches de uma função é 100%, então a cobertura de comandos também é 100%. 
(   ) Métodos estáticos não podem ser objeto de mocks.
(   ) Teste caixa preta é também chamado de funcional; teste caixa-branca é chamado de não-funcional.
(   ) TDD é uma técnica de escrita de testes caixa preta.
(   ) O fluxo de TDD tem três estados: vermelhos (testes falham), verde (testes passam) e refactoring.
(   ) Teste comportamental é aquele que verifica os eventos que ocorreram na execução do SUT.
(   ) Na fase de teste de unidade, o objetivo é explorar-se a menor unidade de projeto, procurando-se 
       identificar erros de lógica e de implementação de cada módulo; na fase de teste de integração, o    
       objetivo é descobrir erros associados às interfaces entre os módulos quando esses são integrados, 
        para se construir a estrutura do software, estabelecida na fase de projeto. (ENADE 2005)

=====

Para concluir, na Seção 9.4, vamos abordar o conceito de débito técnico, que é uma metáfora usada para denotar problemas técnicos no código --- não só de manutenibilidade, mas também de desempenho, usabilidade, configuração, etc --- e que devem ser corrigidos no futuro.

====

===

Estórias podem incluir requisitos não-funcionais? Não, estórias são especificadas pelo representante dos clientes, que é um profissional leigo em Engenharia de Software. Portanto, ele não costuma ter conhecimento de requisitos não-funcionais. Planejar e especificar requisitos não-funcionais não faz parte de seu mundo. Mas veja que uma estória pode demandar uma tarefa relacionada com um requisito não-funcional. No nosso exemplo, a estória "Postar Pergunta" possui uma tarefa que é "implementar camada de acesso a dados". Portanto, essa tarefa visa garantir que as perguntas postadas no sistema sejam persistentes, ou seja, um requisito não-funcional.


===

No entanto, antes de concluir e já que começamos a falar de métodos formais, gostaríamos de mencionar que eles também podem ser usados para verificar propriedades de um sistema que já está pronto. Ou seja, nesse caso, o objetivo não é auxiliar na especificação de um sistema, mas sim garantir que sua implementação não possui bugs ou comportamentos indesejados. Nesse segundo cenário, o uso de métodos formais tem sido mais bem sucedido. Por exemplo, eles são usados com certa frequência para descobrir bugs em projetos de hardware ou na implementação de device drivers.

=====

Para discuti-las, vamos começar com o seguinte comentário de Edward Yourdon e Larry Constantine (link):

O que procuramos são sistemas fracamente acoplados --- isto é, sistemas nos quais podemos estudar (ou depurar, ou manter) qualquer módulo sem ter que conhecer muito de outros módulos do sistema. (Capítulo 6, página 86).

Esse comentário esclarece os objetivos e tipos de acoplamento. Primeiro, ele deixa claro que o objetivo não é a eliminação completa do acoplamento entre as classes de um sistema, mas construir sistemas fracamente acoplados. Em seguida, os autores explicam o que caracteriza tais sistemas: eles são sistemas nos quais é possível entender qualquer classe sem precisa dominar detalhes de outras classes. 

Veja também que acoplamento é uma relação não comutativa: quando A está acoplado a B, não necessariamente B está acoplado a B.

=====

Os componentes de uma arquitetura distribuída podem se comunicar de duas formas:

Síncrona: o sistema cliente envia uma mensagem para o sistema servidor e espera que ela seja processada. Se o servidor não estiver no ar ou estiver sobrecarregado, a comunicação pode falhar e o cliente terá que providenciar o reenvio da mensagem. 

Assíncrona: o sistema cliente envia uma mensagem para o sistema servidor, mas não precisa ficar aguardando que ela seja processada.

Uma forma de implementar comunicação assíncrona em arquiteturas distribuídas é por meio de arquitetura orientada a mensagens. Na próxima seção, iremos estudar uma segunda forma, baseada em arquiteturas do tipo Publish/Subscribe.


======

<!----
A próxima figura mostra um esboço de software, provavelmente usado para
apoiar uma discussão sobre as classes de um sistema para uma editora de
livros. Veja que o esboço é informal (feito à mão, por exemplo). Além
disso, no caso de algumas classes, informa-se apenas o seu nome. Iremos
estudar mais sobre diagramas de classes na próxima seção.

![](media/image28.jpg){width="3.7927088801399824in"
height="2.224663167104112in"}
---->

======

<!---
![Andrew S. Tanenbaum, professor da Vrije Universiteit, e defensor de arquiteturas microkernel para sistemas operacionais (foto da Wikipedia, licença CC-BY-SA)](figs/cap7/tanembaum.png){width=25%}

![Linus Torvalds, criador do sistema operacional Linux, que  possui uma arquitetura monolítica (foto da Wikipedia, licença CC-BY-SA)](figs/cap7/linus.png){width=25%}
--->

====

<!---
![Stack Overflow survey 2018: Qual método de desenvolvimento você costuma
usar? Resultados relativos a 57 mil respostas.](figs/cap2/so-survey){width=60%}
--->